Алгоритмы приближенных вычислений
 
Задача:
    реализовать набор алгоритмов, а также их визуализацию и интерфейс в виде браузерноговеб-приложения.

    У алгоритмов есть базовый и бонусный варианты (бонусный - это расширенный и/или усложненный вариант
    реализации предложенного алгоритма). Если планируете делать бонусный вариант какого-либо алгоритма,
    то его базовый вариант в таком случае делать НЕ обязательно (Если не указано обратное).

    При желании группа студентов может договориться и реализовать кроме предложенного бонусного
    варианта собственную модификацию или усложнение к данному алгоритму. Если усложнение достаточно
    интересное и/или сложное, то оно оценивается дополнительными баллами для группы.
	Стандартные правила на запрет использования готовых решений или использование генеративных языковых
    моделей для генерации кода - по-прежнему работает(Уточнение, для обучающей выборки или тестовых
    данных - можно использовать готовые дата-сеты, но сам алгоритм его имплементация и работа - должны
    быть обеспечены работой группы)
 
Алгоритмы для реализации

А* 
Базовый вариант:
    ваше приложение позволяет сгенерировать квадратную карту размером n*n, настроить эту карту, 
    разместив на ней непроходимые клетки, клетку начала и конца пути. Далее при запуске алгоритма
    по одной эвристике показывается найденный маршрут или выводится, что маршрута не существует.
Бонусный вариант:
    вы генерируете карту-лабиринт (можно использовать алгоритмы генерации лабиринтов на основе 
    алгоритмов Прима/Краскала) на карте размером n*n, вы позволяете пользователю модернизировать
    этот лабиринт, добавив/убавив непроходимые клетки, клетку начала и конца пути. Далее при запуске
    отрисовывается анимация поиска и прохождения пути на каждой итерации алгоритма (вы показываете,
    какие клетки рассматриваются алгоритмом, какие выбраны и какие анализируются для построения
    маршрута) в режиме реального времени.

Алгоритм кластеризации
Базовый вариант: ваше приложение генерирует плоскость, на которой пользователь может кликами
    расставлять точки для будущей кластеризации. Далее запускается алгоритм, который показывает
    найденные кластеры (цветом или поделив плоскости на области кластеры). Достаточно одного из
    варианта определения кластеров (например K-средних)
Бонусный вариант:
    вы реализовываете несколько вариантов определения кластеров и при запуске вашего алгоритма
    отдельно выделяете и показываете точки, которые в зависимости от используемой метрики относятся
    к разным кластерам, с указанием, к какому кластеру по какой метрике они относятся

Генетический алгоритм
Базовый вариант - решение задачи коммивояжёра. Вы генерируете плоскость, на которой пользователь
    расставляет точки - вершины графа. Веса ребёр - расстояние на плоскости между вершинами. Ваша
    задача - реализовать генетический алгоритм, который построит путь коммивояжера по этому графу.
    Пока алгоритм работает, вы показываете лучшую особь на последней достигнутой итерации алгоритма.
    Следовательно, при завершении алгоритма лучшая особь - потенциально лучший путь коммивояжера.
Бонусный вариант (В прошлом ЧК на 6ой модуль):
    Ваша задача - реализовать генетический алгоритм, который в качестве особи получает полноценный
    работающий АЛГОРИТМ написанный на каком либо общепринятом языке программирования, решающий задачу
    поиск n-ого числа Фибоначчи. Данный расширенный вариант можно делать не как веб-приложение


Муравьиный алгоритм
Базовый вариант:
    решение задачи коммивояжёра. Вы генерируете плоскость, на которой пользователь расставляет
    точки - вершины графа. Ваша задача - реализовать муравьиный алгоритм, который построит путь
    коммивояжёра по этому графу.
Бонусный вариант:
    Оптимизация муравьиной колонии. Вы генерируете карту (лабиринт), куда расставляется муравьиная
    колония (единый центр) и несколько точек с источниками еды (у каждой в отдельности можно
    редактировать её питательность, какое-то числовое значение, считаем что источники еды бесконечные).
    Можно указать количество муравьёв в колонии. Муравьи не знают путей до еды, они должны найти пути
    до источников еды и оптимизировать маршруты и нагруз до них используя принцип муравьиных феромонов.
    В качестве ориентира бонусного варианта(https://youtu.be/emRXBr5JvoY). Оптимизация нагрузки до
    источника еды должна происходить за счет анализа феромонного следа, и учитывать суммарно и длину
    пути и питательность источника, и количество муравьев которые уже на маршруте


Дерево решений
Базовый вариант:
    вы даете пользователю возможность ввести обучающую выборку в формате csv-текста, на основе
    которой строится дерево решений. Получив его, вы показываете его пользователю. Далее ваше
    приложение позволяет вводить данные в формате csv-текста для принятия решения по дереву. Вы
    прогоняете введенный элемент по дереву, отображая принятое решение и его путь на каждом узле
    дерева
Бонусный вариант:
    Помимо базового варианта вы добавляете возможность оптимизировать размер полученного дерева
	

Нейронная сеть
Базовый вариант:
    ваша нейронная сеть работает с пиксельным изображением размером 5 на 5 (25 пикселей). Пользователь
    может рисовать цифры за счёт покраски отдельных пикселей (смена чёрного на белый цвет и обратно).
    Ваша нейронная сеть понимает, какая цифра нарисована, и показывает это пользователю.
Бонусный вариант:
    ваша нейронная сеть работает с пиксельным изображением 50 на 50 пикселей, пользователь рисует
    цифры за счёт закрашивания пикселей (аналог рисования ручкой или спреем в paint), ваша нейронная
    сеть определяет нарисованную цифру и выводит пользователю

